EKS setup On AWS using Console
-------------------------------
- kubernetes is a container and orchestration and container managed tool 
- To setup kuberenetes cluster on aws there three ways 
 1. ESC
 2. EKS
 3. Fargate

Kubernetes Installation options 
----------------------------------
- For Development 
 - Kuberentes using minikube
 - Kuberenetes using Docker for Desktop 

- Unmanaged (Installer Based)
 - kuberenetes with kubeadm
 - kuberenetes with kops
 - kubereetes with kubespray

- Managed k8s (Platform Based)
 - AKS (Azure kuberenetes service)
 - EKS (Elastic kuberenetes service)
 - GKE (Google kuberenetes service)
 - OKE (oracle kuberenetes Engine)

EKS Setup there Two ways
-------------------------
1. using eksctl command line tool
2. using aws console

EKS setup using console way
---------------------------
- search EKS on aws dashboard
- click on create cluster
	EKS>Clusters> Create cluster
							step1: Configure cluster
								- cluster configurations
								 	Name 					: thej-cluster
								 	kuberenetes version 	: 1.28
								 	cluster service role 	: (here automatically a role gets created this role have access our entire cluster)
								 - cluster access 
								 	Bootstrap cluster administrtor access : select Allow administrator access
								 	cluster authentication mode : EKS API and ConfigMap

							step2: Specify networking
								- Networking 
									VPC : Choose default vpc
									subntes : select all subnets
									security group : do not select here it will automatically create them self 
								- cluster endpoints
									select Public and private

							step3: Configure observability
								- Control plane logging 
									select (API server, Authenticator, Controller manager, Scheduler)

							step4: select add-ons
								- Go with default (kube-proxy , CoreDNS, Amazon VPC CNI, Amazon EKS Pod Identity Agent)

							step5: Configure selected add-ons settings
							
							step6: Review and create



- install awscli on windows machine
- install kubectl tool on windows machine 

	C:\Users\DELL>aws eks --region ap-northeast-1 describe-cluster --name the-cluster-3 --query cluster.status
	"ACTIVE"


	C:\Users\DELL>aws eks --region ap-northeast-1 update-kubeconfig --name the-cluster-3
	Updated context arn:aws:eks:ap-northeast-1:712351660193:cluster/the-cluster-3 in C:\Users\DELL\.kube\config

	C:\Users\DELL>kubectl get svc
	NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
	kubernetes   ClusterIP   10.100.0.1   <none>        443/TCP   30m

	C:\Users\DELL>


- Now create worker node here on console
- create iam role with (AmazonEKSWorkerNodePolicy, AmazonEKS_CNI_Policy, AmazonEC2ContainerRegistryReadOnly)
	goto IAM ->create role
		step1: Select trusted entity 
			Trusted entity type : select aws service
			Use case : EC2
		step2: Add permissions
			policy name :
				AmazonEC2ContainerRegistryReadOnly
				AmazonEKS_CNI_Policy
				AmazonEKSWorkerNodePolicy

		step3: Name, review, and create
			name : eks-cluster-worker_node_group1_role

	- goto thej-cluster-3->goto compute section here create nodegroup
		
		step1: Configure node group
			- Node group configuration
				name: group1
				Node IAM role : eks-cluster-worker_node_group1_role

		step2: Set compute and scaling configuration
			- Node group compute configuration
				AMI type : amazon linux 
				Capacity type : on Demand
				Instance types : t3.micro
				Disk size : 20GB
			- Node group scaling configuration
				Desired size : 2
				Minimum size : 2
				Maximum size : 2

		step3: Specify networking
			- Node group network configuration
				Subnets : select all subnets 
				Configure remote access to nodes (Enable)
					EC2 Key Pair
						select pem file 
					Allow remote access from : select all

		step4: Review 

- To verify cluster Nodes 
	
	# kubectl get nodes --watch 


C:\Users\DELL>kubectl get nodes
NAME                                               STATUS   ROLES    AGE   VERSION
ip-172-31-25-69.ap-northeast-1.compute.internal    Ready    <none>   51s   v1.28.5-eks-5e0fdde
ip-172-31-34-103.ap-northeast-1.compute.internal   Ready    <none>   53s   v1.28.5-eks-5e0fdde

C:\Users\DELL>

====================================================

To delete cluster 
 1. delete workernode group 
 2. delete cluster 


