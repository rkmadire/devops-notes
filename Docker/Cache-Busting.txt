cache busting in docker file 17:00 min docker 9th session 
-----------------------------

1. What is cache bursing 

   - Cache busting is a technique used to ensure that Docker does not use cached layers during the build process. This is particularly useful when you want to force Docker to download the latest versions of dependencies or rebuild layers from scratch.


2. How to implement cache bursting in Docker 
   
   - To implement cache bursting in Docker using flag or build arguments 
   
   - Using < --no-cache > flag it is a simplest way to bypass the cache this will ensures docker will ignores any cached layers and rebuilds the entire image from scrach         

      # docker build --no-cache -t my_image .

   - Using Build Arguments like timestamp or git commit 
   - we can use build arguments to force docker to invalidate the cache for specific steps in the Dockerfile  

   Example:
   -----------------------
   FROM ubuntu
   MAINTAINER intelliqit

   # Define a build argument for cache busting
   ARG CACHEBUST=1

   # Update and install packages
   RUN apt-get update -y
   RUN apt-get install -y tree
   RUN apt-get install -y git
   --------------------------------------

   - Build Command
    - pass a uniq value like current timestamp to the CACHEBUST argument to force Docker to rebuild the image 

    #  docker build --build-arg CACHEBUST=$(date +%s) -t my-image .

   - Here, `$(date +%s)` generates the current timestamp, which changes every second, ensuring the cache is invalidated.

 Key points to Remember

   1. --no-cache will forces docker to rebuild the entire image without using any cached layers 
   2. Build arguments use usinq value like (e.g timestamp or git commit hash) to invalidate the cache for specific steps 



Examples:
------------
1. Dockerfile
   ----------------------------
   FROM ubuntu
   MAINTAINER intelliqit

   ARG CACHEBUST=1
   RUN apt-get update -y
   RUN apt-get install -y tree
   RUN apt-get install -y git
   ----------------------------------
   
   - Build Command:
   
   docker build --build-arg CACHEBUST=$(date +%s) -t my-image .
   
   - Docker will rebuild the image, ensuring the latest versions of tree and git are installed