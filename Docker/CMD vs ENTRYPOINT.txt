Docker 11th Session
--------------------

 - Use CMD when you want a default command that can be changed.
 - Use ENTRYPOINT when you want a fixed command but allow additional arguments.

 CMD (Command):
 	
 	- Purpose: It sets the default command that runs when the container starts.
 	- Flexibility: The command given in CMD can be overridden when running the 
 	container.
 	
 	Example
 	-----------------------
 	FROM ubuntu
	CMD ["echo", "Hello, World!"]
	-----------------------------
	- If you run docker run myimage, it will print Hello, World!.
	- If you run docker run myimage date, it will override CMD and run date instead.

		# docker build -t local_image_name .

		# docker run --name container_name local_image_name  

	- To Override CMD

		# docker run --name container_name local_image_name date


 ENTRYPOINT:
 	- Purpose: It defines the main command that always runs inside the container.
  	- Flexibility: The command given in ENTRYPOINT cannot be overridden but allows additional arguments.

  	Example
  	--------------------
  	FROM ubuntu
  	ENTRYPOINT ["echo", "Hello, World!"]
  	---------------------------------------
  	- If you run docker run myimage, it will print Hello, World!.
  	- If you run docker run myimage Some other message, it will print Hello, World! Some other message (because ENTRYPOINT always runs).

 Difference CMD and ENTRYPOINT:
 	- CMD and Entrypoint both are used for default command 
 	- CMD can be overriden using below command
 		# docker run imagename newcommand 
 	- But Entrypoint cannot be overriden But extra argument can be passed 
 	- CMD can be used for commonly nginx or bash
 	- Entrypoint can be used for commonly Running scripts, commands, or always-required excutables 

 CMD vs ENTRYPOINT Example:
 	
 	CMD example:
	 	--------------------
	 	FROM ubuntu
		CMD ["nginx", "-g", "daemon off;"]
		-------------------------------
		- If you run docker run myimage, it starts nginx.
		- If you run docker run myimage date, it runs date instead of nginx.

	Entrypoint Example:
		-------------------------
		FROM ubuntu
		ENTRYPOINT ["nginx", "-g", "daemon off;"]
		------------------------------
		- If you run docker run myimage, it starts nginx.
		- If you run docker run myimage date, it still runs nginx and ignores date.
		




1.every container trigger one perticular command that is default command for that container
2.for ubuntu based OS related system defaults command is bash
3.to change default process command use ENTRYPOINT 
---------------------
FROM ubuntu
MAINTAINER intelliqit
RUN apt-get update

RUN apt-get install -y nginx

EXPOSE 80 
ENTRYPOINT ["nginx", "-g", "daemon off;"] 
----------------------------
-->what is the different between CMD and ENTRYPOINT
->both cmd and entrypoint used to specify the defaults process of command
-->cmd has some advantages 
-->default process can be modified by using CMD instruction 
---------------------
FROM ubuntu
MAINTAINER intelliqit
RUN apt-get update

RUN apt-get install -y nginx

EXPOSE 80 
CMD ["nginx", "-g", "daemon off;"] 
----------------------------
-->if i give default process by using CMD process
#docker run --name u2 -it myubuntu date
-->from above command date default process set 
-->when default process is over then it deleted container 
--------------------------------------
============================================================
what is the difference between CMD and ENTRYPOINT in docker
-------------------------------------------------------------
Both CMD and ENTRYPOINT are instructions used in Dockerfile to specify the command to be executed when a Docker container starts. However, they have different functions and behaviors:

CMD:
CMD is used to set the default command that will be executed when a container is launched. It is usually used to define the main application that will run inside the container. CMD instruction can be overwritten at runtime with docker run command argument.
Example:
=================
FROM ubuntu
CMD ["echo", "Hello, World!"]
===================
In this example, when the container starts, it will execute the command echo "Hello, World!". If you run docker run <image> you will see Hello, World! printed in the console.

ENTRYPOINT:
ENTRYPOINT is similar to CMD in that it specifies the command to be executed when a container is launched. But unlike CMD, it is not overwritten by command-line arguments passed to docker run.
Example:
=========================
FROM ubuntu
ENTRYPOINT ["echo", "Hello, World!"]
========================================
In this example, when the container starts, it will execute the command echo "Hello, World!" and exit. If you run docker run <image> you will see Hello, World! printed in the console. But if you run docker run <image> Some other message, the container will still execute the same command (echo "Hello, World!") and append the additional message at the end, i.e., Hello, World! Some other message.

In summary, CMD is used to set the default command that can be overwritten at runtime, while ENTRYPOINT specifies the main command that cannot be overwritten, and can be used for setting up the container environment or running a script.
----------------------


